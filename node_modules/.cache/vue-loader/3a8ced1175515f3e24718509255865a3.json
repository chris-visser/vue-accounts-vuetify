{"remainingRequest":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/cloudspider/Server/open-source/meteor-vue-auth/packages/vuetify-auth-components/src/pages/Main.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/cloudspider/Server/open-source/meteor-vue-auth/packages/vuetify-auth-components/src/pages/Main.vue","mtime":1546464735413},{"path":"/home/cloudspider/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport * as components from './entry';\n\nexport default {\n  components: { ...components },\n\n  data() {\n    return {\n      output: '',\n      loginStatus: 'idle',\n      registrationStatus: 'idle',\n      forgotPasswordStatus: 'idle',\n      resetPasswordStatus: 'idle',\n    };\n  },\n\n  methods: {\n    async login(payload) {\n      await this.mockStatus('login', payload);\n    },\n    async register(payload) {\n      await this.mockStatus('registration', payload);\n    },\n    async sendForgotPasswordEmail(payload) {\n      await this.mockStatus('forgotPassword', payload);\n    },\n    async resetPassword(payload) {\n      await this.mockStatus('resetPassword', payload);\n    },\n    async mockStatus(name, payload) {\n      this[`${name}Status`] = 'submitting';\n\n      this.output = payload;\n\n      setTimeout(() => {\n        this[`${name}Status`] = 'success';\n\n        setTimeout(() => {\n          this[`${name}Status`] = 'idle';\n        }, 3000);\n      }, 3000);\n    },\n  },\n};\n",{"version":3,"sources":["Main.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Main.vue","sourceRoot":"src/pages","sourcesContent":["<template>\n  <v-layout align-center justify-center row wrap>\n    <v-flex xs12>\n      <v-alert type=\"info\" :value=\"!!output\">\n        {{output}}\n      </v-alert>\n    </v-flex>\n\n    <v-flex sm4 lg3>\n      <login-form :status=\"loginStatus\" @submit=\"login\" autofocus />\n    </v-flex>\n    <v-flex sm4 lg3>\n      <registration-form :status=\"registrationStatus\" @submit=\"register\" />\n    </v-flex>\n    <v-flex sm4 lg3>\n      <forgot-password-form :status=\"forgotPasswordStatus\" @submit=\"sendForgotPasswordEmail\" />\n    </v-flex>\n    <v-flex sm4 lg3>\n      <router-link\n          v-if=\"!$route.query['reset-password-token']\"\n          :to=\"{query: { 'reset-password-token': 'dummy-token-value' }}\"\n          class=\"d-block text-xs-right mb-5\"\n      >\n        Set fake token in URL\n      </router-link>\n      <reset-password-form :status=\"resetPasswordStatus\" @submit=\"resetPassword\" />\n    </v-flex>\n\n    <v-flex sm4 lg3>\n      <login-card />\n    </v-flex>\n    <v-flex sm4 lg3>\n      <registration-card />\n    </v-flex>\n    <v-flex sm4 lg3>\n      <forgot-password-card />\n    </v-flex>\n    <v-flex sm4 lg3>\n      <reset-password-card />\n    </v-flex>\n  </v-layout>\n</template>\n\n<script>\n  import * as components from './entry';\n\n  export default {\n    components: { ...components },\n\n    data() {\n      return {\n        output: '',\n        loginStatus: 'idle',\n        registrationStatus: 'idle',\n        forgotPasswordStatus: 'idle',\n        resetPasswordStatus: 'idle',\n      };\n    },\n\n    methods: {\n      async login(payload) {\n        await this.mockStatus('login', payload);\n      },\n      async register(payload) {\n        await this.mockStatus('registration', payload);\n      },\n      async sendForgotPasswordEmail(payload) {\n        await this.mockStatus('forgotPassword', payload);\n      },\n      async resetPassword(payload) {\n        await this.mockStatus('resetPassword', payload);\n      },\n      async mockStatus(name, payload) {\n        this[`${name}Status`] = 'submitting';\n\n        this.output = payload;\n\n        setTimeout(() => {\n          this[`${name}Status`] = 'success';\n\n          setTimeout(() => {\n            this[`${name}Status`] = 'idle';\n          }, 3000);\n        }, 3000);\n      },\n    },\n  };\n</script>\n"]}]}